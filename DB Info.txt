# 테스트 데이터를 위한 Postgre DB 초기화 데이터

-- MongoDB
Port: 27017
User: tongstar, PW: @***********
DB Name: Minigram

mongodb://localhost:27017/?minPoolSize=3&maxPoolSize=3와 같이 스레드 풀 개수도 정해줄 수 있음

--- 주의점
계정이 생성되는 DB 개인별로 존재할 수 있기에 특정 DB에서 계정 인증을 받고 특정 DB로 이동해야 됨.
즉 계정 이름과 비번이 모두 같은 계정이 존재할 수 있음.
계정을 인증 받는 DB가 중요.


-- Postgre
Port: 5432
User: tongstar, PW: @***********
DB Name: Minigram


## Postgre 테이블 생성

### user_tb
설명: 유저 정보가 담기는 table

CREATE TABLE user_tb
(
    user_id			VARCHAR(32) NOT NULL,
    user_nm			VARCHAR(64) NOT NULL,
	user_info		TEXT,
	password		VARCHAR(32) NOT NULL,
	img_path		VARCHAR(255),
	friend_list 	TEXT,
	login_ip		VARCHAR(40),
	login_port		INTEGER,
	CONSTRAINT chk_user_id CHECK (user_id ~* '/^\w{6,31}$/'),	
	CONSTRAINT chk_password CHECK (password ~* '/^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,31}$/'),
    PRIMARY KEY (user_id)
)


### chatroom_tb
설명: 채팅방 관련 테이블

CREATE TABLE chatroom_tb
(
    session_id		VARCHAR(65) NOT NULL,
	session_nm		VARCHAR(255) NOT NULL,
	session_info 	TEXT,
	img_path		VARCHAR(255),
	CONSTRAINT chk_session_id CHECK (session_id ~* '/^\w{6,31}-\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])-\d{6}$/'),
    PRIMARY KEY (session_id)
)

session_id 제약: 생성자 ID + '-' + 세션 생성일 + '-' + 생성일 기준 생성 순서 6자리
ex) tongstar-20231023-000001 / tongstar 사용자가 2023/10/23에 첫번째로 만든 채팅방이라는 정보가 담김


### participant_tb
설명: 유저와 채팅방 사이 관계 정의 테이블

CREATE TABLE participant_tb
(
    session_id			VARCHAR(65) NOT NULL,
	participant_id		VARCHAR(32) NOT NULL,
	message_id			BIGINT,
	CONSTRAINT fk_session_id FOREIGN KEY(session_id) REFERENCES chatroom_tb(session_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_participant_id FOREIGN KEY(participant_id) REFERENCES user_tb(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (session_id, participant_id)
)

message_id: participant가 가장 최근 읽은 메시지의 id

## MongoDB 컬렉션 생성

### [SESSION_ID]_log 구조 / SESSION_ID에 따라 동적으로 생성됨
설명: 채팅방 하나당 `[SESSION_ID]_log`라는 컬렉션이 하나씩 생김, 해당 컬렉션에 sort 속도 개선을 위한 ensureIndex 필요할 수도...

밑은 말풍선 하나당 컬렉션에 저장되는 정보
sender_id와 send_date를 조합하면 고유하기에 key로 작동할 수 있음
{
	"message_id" : 	(메시지 id, 보낸 순서 big int)
	"sender_id": 	"보낸 사람 USER_ID",
	"send_date": 	ISODate("2023-10-19T13:21:40.125"),
	"content_type": "text",
	"content": 		"7LGE7YyF7J2EIOyzkOuztOyekH4",
	"read by": [
		{
			"reader_id": "읽은 사람 USER_ID"
		},
		...
	],
}


## Client - Server 통신 규격

### Server -> Client

#### 

#### Chat Room Init
채팅방 초기화시 밑과 같은 형식을 서버와 클라이언트가 주고 받음
실제 채팅방의 컨텐츠를 모두 가져오진 않고 마지막 채팅 내용과 사용자가 읽지 않은 메시지 개수 정도를 가져옴

{
	"chatroom_init_data": [
		{
			"session_id": "세션 id",
			"session_name": "세션 이름",
			"session_img": "Base64 인코딩된 세션 이미지, 이미 클라이언트에서 최신 이미지를 가지고 있다면 empty string임",
			"session_img_date": "YYYY-MM-DD hh:mm:ss.ms 로컬 세션 이미지 파일이 최신인지 알기 위함",
			
			// 클라이언트 사용자가 채팅방 채팅을 읽지 않은 개수, 음수면 채팅방을 상대방이 지우거나 추방된거임
			"unread_count": 10

			// 마지막으로 생성된 채팅 정보
			"chat_info": {
				"sender_id": 	"보낸 사람 USER_ID"
				"send_date": 	"2023-10-19 13:21:40.125",
				"content_type": "text"

				// content_type이 text가 아니라면 content 내용은 간략화됨
				"content": 		"7LGE7YyF7J2EIOyzkOuztOyekH4"
			}				
		},
		...
	]
}

## Client Cache 구성

클라이언트에 남는 캐시 파일은 대화에서 생성되는 미디어 정보로 구성된다.
일반적인 텍스트 형식은 서버에서 가져온다.

캐시 파일 구성은 밑과 같다.
Minigram.exe
cache
	L session_id
		L session_cache_info.dat 
		  session_img_info.bck
		  sender_id + '_' + send_date
			

### session_img_info.bck 
이미지 갱신 날짜 + "|" + 이미지 base64 인코딩 정보

## 참고할 만한 글
https://marketsplash.com/tutorials/cpp/how-to-create-a-messenger-application-cplusplus/
http://tsfkb.wikidot.com/tips:android:cache
https://insidetelegram.eu/en/2022/01/20/telegram-what-is-cache-how-to-cancel-it/