# 테스트 데이터를 위한 Postgre DB 초기화 데이터

-- MongoDB
Port: 27017
User: tongstar, PW: @***********
DB Name: Minigram

mongodb://localhost:27017/?minPoolSize=3&maxPoolSize=3와 같이 스레드 풀 개수도 정해줄 수 있음

--- 주의점
계정이 생성되는 DB 개인별로 존재할 수 있기에 특정 DB에서 계정 인증을 받고 특정 DB로 이동해야 됨.
즉 계정 이름과 비번이 모두 같은 계정이 존재할 수 있음.
계정을 인증 받는 DB가 중요.


-- Postgre
Port: 5432
User: tongstar, PW: @***********
DB Name: Minigram

tongstar 유저에게 웬만하면 superuser 권한을 주자.
안그러면 따로 Role을 생성하여 관리하거나 각 테이블마다 `GRANT SELECT ON user_tb TO PUBLIC` 이런 명령어로 수정 권한을 줘야 soci 라이브러리가 작동한다.


## Postgre 테이블 생성

### user_tb
설명: 유저 정보가 담기는 table

CREATE TABLE user_tb
(
    user_id			VARCHAR(32) NOT NULL,
    user_nm			VARCHAR(64) NOT NULL,
	user_info		TEXT,
	password		VARCHAR(32) NOT NULL,
	img_path		VARCHAR(255),
	login_ip		VARCHAR(40),
	login_port		INTEGER,
	CONSTRAINT chk_user_id CHECK (user_id ~* '/^\w{6,31}$/'),	
	CONSTRAINT chk_password CHECK (password ~* '/^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,31}$/'),
    PRIMARY KEY (user_id)
)


### contact_tb
설명: 연락처 정보가 담기는 table

CREATE TABLE contact_tb
(
    user_id			VARCHAR(32) NOT NULL,
    acquaintance_id	VARCHAR(32) NOT NULL,
	status			INTEGER NOT NULL,
	CONSTRAINT fk_user_id FOREIGN KEY(user_id) REFERENCES user_tb(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_acquaintance_id FOREIGN KEY(acquaintance_id) REFERENCES user_tb(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (user_id, acquaintance_id)
)

status: 친구 요청 상태, 친구 연결 상태 등을 다룸 / 0: 요청 보냄, 1: 친구, 2: 숨김, 3: 차단

### session_tb
설명: 채팅방 관련 테이블

CREATE TABLE session_tb
(
    session_id		VARCHAR(65) NOT NULL,
	session_nm		VARCHAR(255) NOT NULL,
	session_info 	TEXT,
	img_path		VARCHAR(255),
	CONSTRAINT chk_session_id CHECK (session_id ~* '/^\w{6,31}-\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])-\d{6}$/'),
    PRIMARY KEY (session_id)
)

session_id 제약: 생성자 ID + '_' + 세션 생성일
ex) tongstar_1706838249711 / tongstar 사용자가 1706838249711 since_epoch_time_milli에 첫번째로 만든 채팅방이라는 정보가 담김


### participant_tb
설명: 유저와 채팅방 사이 관계 정의 테이블

CREATE TABLE participant_tb
(
    session_id			VARCHAR(65) NOT NULL,
	participant_id		VARCHAR(32) NOT NULL,
	message_id			BIGINT,
	CONSTRAINT fk_session_id FOREIGN KEY(session_id) REFERENCES session_tb(session_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_participant_id FOREIGN KEY(participant_id) REFERENCES user_tb(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (session_id, participant_id)
)

message_id: participant가 가장 최근 읽은 메시지의 id, 채팅방 처음 들어오면 가장 최신 message_id로 설정

## MongoDB 컬렉션 생성

### [SESSION_ID]_log 구조 / SESSION_ID에 따라 동적으로 생성됨
설명: 채팅방 하나당 `[SESSION_ID]_log`라는 컬렉션이 하나씩 생김, 해당 컬렉션에 sort 속도 개선을 위한 ensureIndex 필요할 수도...

밑은 말풍선 하나당 컬렉션에 저장되는 정보
sender_id와 send_date를 조합하면 고유하기에 key로 작동할 수 있음
{
	"message_id" : 	(메시지 id, 보낸 순서 big int)
	"sender_id": 	"보낸 사람 USER_ID",
	"send_date": 	ISODate("2023-10-19T13:21:40.125"),
	"content_type": 컨텐츠 타입 (size_t),
	"content": 		"7LGE7YyF7J2EIOyzkOuztOyekH4",
	"reader_id" : [ "tongstar", "yellowjam" ... ]
}

## Client - Server 통신 규격

### Server -> Client

#### 

#### Session Init
채팅방 초기화시 밑과 같은 형식을 서버와 클라이언트가 주고 받음
실제 채팅방의 컨텐츠를 모두 가져오진 않고 마지막 채팅 내용과 사용자가 읽지 않은 메시지 개수 정도를 가져옴

{
	"session_init_data": [
		{
			"session_id": "세션 id",
			"session_name": "세션 이름",
			"session_img_name": "이미지 이름",
			"session_info": "",
			
			// 클라이언트 사용자가 채팅방 채팅을 읽지 않은 개수, 음수면 채팅방을 상대방이 지우거나 추방된거임
			"unread_count": 10

			// 마지막으로 생성된 채팅 정보
			"chat_info": {
				"sender_id": 	"보낸 사람 USER_ID",
				"send_date": 	since_epoch_time,
				"message_id":	462,
				"content_type": int형,

				// content_type이 text가 아니라면 content 내용은 간략화됨
				"content": 		"7LGE7YyF7J2EIOyzkOuztOyekH4"
			}				
		},
		...
	]
}

해당 json과 함께 raw img 파일 배열 보내야 함


#### Session Recieve Chat
클라이언트에서 채팅 받는 경우

{
	"message_id" : 	(메시지 id, 보낸 순서 big int)
	"sender_id": 	"보낸 사람 USER_ID",
	"send_date": 	ISODate("2023-10-19T13:21:40.125"),
	"content_type": 컨텐츠 타입 (size_t),
	"content": 		"7LGE7YyF7J2EIOyzkOuztOyekH4",
	"reader_id" : [ "tongstar", "yellowjam" ... ]
}

#### Session Refresh
채팅방을 눌렀을 때 서버가 보내주는 정보
클라이언트 채팅방 리스트뷰에 메시지가 하나라도 이미 차 있다면 다 가져와서 리스트뷰에 넣는다.
클라이언트 메신저를 열고 나서 처음 채팅방에 입장하는 것이라면 가장 최신 메시지 100개만 가져와서 넣는다.

{
	"fetched_chat_list" [
		{
			"sender_id": 	"보낸 사람 USER_ID",
			"send_date": 	"2023-10-19 13:21:40.125",
			"message_id":	462,
			"content_type": "text",
			"content": 		"7LGE7YyF7J2EIOyzkOuztOyekH4"
		},
		...
	]
}

#### Fetch More Message
클라이언트 채팅방에서 스크롤을 계속 위로 올리면 발생하게 되는 과거 채팅 이력 서버에서 가져오는 경우
Session Refresh 통신과 동일하다.

#### Contact Init
연락처 목록 초기화시 서버에서 클라로 던져주는 json 데이터

{
	"contact_init_data": [
		{
			"user_id": "tongstar",
			"user_name": "KyungJoonLee"
			"user_img": 이미지 이름(확장자 포함),
			"user_info": "어쩌구 저쩌구 블라블라"
		},
		...
	]
}

#### Contact Request Init
친구 추가 정보 가져올 때 서버가 클라로 던져주는 json 데이터

{
	"contact_request_init_data": [
		{
			"user_id": "tongstar",
			"user_name": "KyungJoonLee"
			"user_img": 이미지 이름(확장자 포함),
			"user_info": "어쩌구 저쩌구 블라블라"
		},
		...
	]
}

raw img file이 담긴 배열을 함께 전송함

## Client Cache 구성

클라이언트에 남는 캐시 파일은 대화에서 생성되는 미디어 정보로 구성된다.
일반적인 텍스트 형식은 서버에서 가져온다.

캐시 파일 구성은 밑과 같다.
Minigram.exe
minigram_cache
	L user_id
		L profile_img
			L 날짜.이미지_확장자
		L sessions
			L session_id
				L 날짜.이미지_확장자
		L contact
			L acquaintance_id
				L profile_img
					L 날짜.이미지_확장자
		L contact_request
			L requester_id
				L 날짜.이미지_확장자
		L setting_info
			
날짜는 이미지 갱신 날짜(time since epoch)


## Server Cache 구성
MinigramServer.exe
server_data
	L user_id
		L profile_img
			L 날짜.이미지_확장자
		L sessions
			L session_id
				L session_img
					L 날짜.이미지_확장자

## 참고할 만한 글
https://marketsplash.com/tutorials/cpp/how-to-create-a-messenger-application-cplusplus/
http://tsfkb.wikidot.com/tips:android:cache
https://insidetelegram.eu/en/2022/01/20/telegram-what-is-cache-how-to-cancel-it/




        std::filesystem::directory_iterator it{file_path};
        while (it != std::filesystem::end(it))
        {
            int64_t img_update_date = 0;
            if (std::filesystem::is_directory(it->path()))
            {
                auto profile_img_path = it->path() / "profile_img";
                if (!std::filesystem::exists(profile_img_path))
                    std::filesystem::create_directories(profile_img_path);
                else
                {
                    std::filesystem::directory_iterator child{profile_img_path};
                    // 일단 프로필 이미지는 단 하나만 저장한다고 가정
                    if (child != std::filesystem::end(child))
                        img_update_date = std::atoll(child->path().stem().string().c_str());
                }

                if (img_update_date)
                    acq_data.push_back({it->path().filename().string(), img_update_date});
            }
            it++;
        }