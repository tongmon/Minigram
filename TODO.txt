# 개발할 기능들

## 코드 최적화

1. 버퍼로 사용중인 std::string을 std::vector<std::byte>로 변경하기
2. const string& 이나 string_view로 바꿀 수 있는 것들 찾아서 모두 바꾸기
3. 람다에서 사라질 변수들 참조로 받던거 복사로 변경
4. json 불필요하게 base64 변환하던거 수정

## DB

1. 연락처 - 완료

## Server

1. 로그인 - 완료
2. 채팅방 초기화 - 완료
3. text 메시지 처리 - 완료
4. img 메시지 처리, 이모티콘
5. 채팅방 생성
6. 연락처 추가(친구 추가)
7. 채팅방 나가기
8. 채팅방 전환시 내용 긁어오기
9. 채팅 기록 검색

## Client

### UI

1. 로그인 화면 - 70%
2. Text 챗 버블 - 완료
3. Img 챗 버블
4. 채팅방 화면
5. 연락처 화면(친구 추가 알림도 있어야 함)
6. 채팅방 나가기
7. 채팅방 taskbar에 알림 띄우기 (QApplication::alert(), QApplication::notify(), 혹은 qml의 Notification 객체 이용할 듯?)
8. 채팅방 전환시 내용 긁어오기
9. 채팅 기록 검색
10. layout들 중 필요한건 splitterview로 변경할 것

특정 c++ 구조체 qml로 넘길때  Q_DECLARE_METATYPE 사용

Qt6에서는 QtGraphicalEffects를 qml에서 import할 수 없기에 Qt5Compat.GraphicalEffects로 대체해야됨
import가 바뀌었기에 cmake 포함 모듈도 밑과 같이 바꿔야됨
find_package(Qt6 COMPONENTS Core5Compat REQUIRED)
target_link_libraries(mytarget PUBLIC Qt6::Core5Compat)


c++로 특정 모델 만들고 qml과 연동하기
https://stackoverflow.com/questions/48534529/how-to-populate-listview-with-qstringlist
https://makersweb.net/qt/14619


단어 자동 완성, 리스트뷰 filter에 관한 글들
https://stackoverflow.com/questions/28499676/how-to-search-for-and-select-items-from-a-qlistview

QSortFilterProxyModel -> listview search, filter 기능
https://kunalmaemo.blogspot.com/2013/04/creating-qml-listview-with-search.html
https://www.youtube.com/watch?v=6oQuxhDsv20&ab_channel=KunalParmar -> demo from listview filter

한글자 칠 때마다 검색 내용 동적으로 변하는 거 -> incremental search, find as you type(FAYT), spell checker, dfs/bfs/trie
https://ialy1595.github.io/post/korean-incremental-search/


- 테스트 경로
db에 유저 4개 정도 추가 -> tongstar로 회원가입해서 유저 추가[trySignUp 검사 O] -> 로그인[tryLogin 검사 O] -> 친구 추가[tryAddContact O 검사] -> 세션 만들기(한 3개 정도)[tryAddSession 검사 O] -> 특정 세션에서 대화[trySendTextChat 검사 O] -> 대화 중이지 않은 세션에서 메시지 갱신 되는지 확인 -> 다른 세션 입장시 채팅방 갱신 여부

-- 메시지 받는 기능 테스트 경로
세션 보유를 많이하고 있는 유저로 로그인 -> 해당 유저의 세션 읽어들이는 로직 트리거 [tryInitSessionList 검사] -> 특정 유저가 해당 유저로 메시지를 보냄 -> 해당 유저 클라이언트에서 그 메시지가 속한 세션 갱신[RecieveTextChat 검사]

-- 메시지 읽은 사람 갱신 루트
특정 사용자가 메시지 보냄(trySendChat) -> 서버에서 메시지 뿌림(ChatHandling: 해당 함수에서 뿌릴 때 람다 함수에 특정 로직 박아야됨) -> 다른 사용자가 메시지 받음(RecieveChat 특정 조건에 의해서 메시지 읽었다는 정보를 서버에 보냄) -> 서버에서 해당 정보 받고 모든 사용자의 메시지 읽음 유무를 획득하고 취합해서 클라이언트에 전달해야 함(ChatHandling)

세션 보유를 많이하고 있는 유저로 로그인 -> 해당 유저의 세션 읽어들이는 로직 트리거 [tryInitSessionList 검사] -> 특정 세션을 클릭하여 접속[tryRefreshSession 검사]

topwindow인지 검사하고 있는 함수가 있어야 됨 ex) activate window

클라에서 메시지 받을 때 topwindow인지 검사, topwindow가 세션 안읽은 메시지 +1 처리

우선적으로 해야 하는 것: session, sessionmodel, chat, chatmodel 관련 로직들 구축 -> 일단 함

채팅 보내는 함수들 구조 다시 변경해야 함, qml 소통 방식 바뀜

tryRefreshSession을 하면 reader_id 갱신을 위해 해당 세션에 참가한 사용자들 한테도 알려야 함 (RefreshReaderIds)

